/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wstimbradotexto33;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.InputStream;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.spec.PKCS8EncodedKeySpec;
import sun.misc.BASE64Encoder;
import wstimbradotexto33.KeyLoader;
import org.apache.commons.ssl.PKCS8Key;

/**
 *
 * @author ventas4
 */
public class PanelPrincipal extends javax.swing.JFrame {
    //Implementamos el WS para el timbrado
    private final com.facturaselectronicascfdi.WsTimbradoTexto33 service = new com.facturaselectronicascfdi.WsTimbradoTexto33();
    private final com.facturaselectronicascfdi.WsTimbradoTexto33Soap port = service.getWsTimbradoTexto33Soap12();
    //Implementamos el WS para las cancelaciones
    private final com.facturaselectronicascfdi.WsCancelar33 servicecancelar = new com.facturaselectronicascfdi.WsCancelar33();
    private final com.facturaselectronicascfdi.WsCancelar33Soap portcancelar = servicecancelar.getWsCancelar33Soap12();
    
    String Correo="demo.sifec@gmail.com";
    String Pass="Acceso$01";
    String Proceso = "511110"; 
    /**
     * Creates new form PanelPrincipal
     */
    public PanelPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Resultado1 = new javax.swing.JTextArea();
        TimbrarPorTexto33 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Resultado = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        SellarTimbrarPorTexto33 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        Cancelar = new javax.swing.JButton();
        CancelarEncode = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        ResCance = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();

        Resultado1.setColumns(20);
        Resultado1.setRows(5);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TimbrarPorTexto33.setText("TimbrarPorTexto33");
        TimbrarPorTexto33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimbrarPorTexto33ActionPerformed(evt);
            }
        });

        Resultado.setColumns(20);
        Resultado.setLineWrap(true);
        Resultado.setRows(5);
        jScrollPane1.setViewportView(Resultado);

        jLabel1.setText("Resultado del Timbrado por Texto: ");

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 10)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("SellarTimbrarPorTexto33(correo, pass, Proceso, contenidoArchivo, cerFile, keyFile, passCer);\nEste metodo SellarTimbrarPorTexto33 requiere un .cer y .key con el que se mandara timbrar el xml\n generado de la cadena de texto propocionada\nEn caso de generar correctamente el Xml apartir del texto, este se mandara sellar con el certificado\n propocionado y regresara el Xml timbrado");
        jScrollPane2.setViewportView(jTextArea1);

        SellarTimbrarPorTexto33.setText("SellarTimbrarPorTexto33");
        SellarTimbrarPorTexto33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SellarTimbrarPorTexto33ActionPerformed(evt);
            }
        });

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 10)); // NOI18N
        jTextArea2.setRows(5);
        jTextArea2.setText("TimbrarPorTexto33(correo, pass, Proceso, contenidoArchivo);\nEste metodo requiere que el Emisor del TXT carge su cer y key en la plataforma web para poder\n realizar el sellado del xml generado apartir de la cadena de texto enviada\nEn caso de generar correctamente el Xml apartir del texto, este se mandara sellar con los certificados \nprecargados y regresara el Xml timbrado");
        jScrollPane3.setViewportView(jTextArea2);

        Cancelar.setText("Cancelar");
        Cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarActionPerformed(evt);
            }
        });

        CancelarEncode.setText("CancelarEncodeCSD");
        CancelarEncode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarEncodeActionPerformed(evt);
            }
        });

        ResCance.setColumns(20);
        ResCance.setRows(5);
        jScrollPane4.setViewportView(ResCance);

        jLabel2.setText("Resultado Cancelacion: ");

        jTextArea4.setEditable(false);
        jTextArea4.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea4.setColumns(20);
        jTextArea4.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 10)); // NOI18N
        jTextArea4.setRows(5);
        jTextArea4.setText("Cancelar33(Correo, Pass, RFC, UUID); cer y key configurados en porta web\n\n\n\nCancelar33EncodeCSD(Correo, Pass, RFC, UUID, Cer, Pem); cer y pem se generan por su sistema");
        jScrollPane5.setViewportView(jTextArea4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 656, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(Cancelar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(CancelarEncode, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGap(33, 33, 33)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(SellarTimbrarPorTexto33, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TimbrarPorTexto33, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(SellarTimbrarPorTexto33, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(TimbrarPorTexto33, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)))
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Cancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CancelarEncode))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        SellarTimbrarPorTexto33.getAccessibleContext().setAccessibleName("SellarTimbrarPorTexto33");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TimbrarPorTexto33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimbrarPorTexto33ActionPerformed
        Correo="demo.sifec@gmail.com";
        Pass="Acceso$01";
        Proceso = "511110"; 
        com.facturaselectronicascfdi.Resultado33 resultado;
        Resultado.setText("");
        try {
            //Ruta archivo TXT con el formato especifico para generar el xml
            String ArchivoXml =".\\src\\wstimbradotexto33\\EjemploFacturaCadenaTexto.txt";
            FileReader fr = new FileReader (ArchivoXml);
            BufferedReader br = new BufferedReader(fr);
            String Xml = br.readLine();
            
            resultado= port.timbrarPorTexto33(Correo, Pass, Proceso, Xml);
                if (resultado.getErrores().equals("")) {
                    //RUTA DE SALIDA DE PDF                            
                            if (resultado.getPDF()!= null){
                             FileOutputStream fos= new FileOutputStream(".\\src\\wstimbradotexto33\\XmlTimbrado33.pdf");
                             fos.write(resultado.getPDF());
                             fos.close();
                            }                          

                        //RUTA DE SALIDA DE XML TIMBRADO
                            if (resultado.getXML() != null){
                            FileOutputStream fos2= new FileOutputStream(".\\src\\wstimbradotexto33\\XmlTimbrado33.xml");
                            fos2.write(resultado.getXML());
                            fos2.close();
                            }
                        //si no existen errores                  
                        Resultado.setText("RESULTADO EXITOSO \nUUID: "+resultado.getFolioUUID()+" \nCadena Original: "+resultado.getCadenaOriginal()+"");
                }else{
                    Resultado.setText("Se generaron los siguientes errores: "+resultado.getErrores() );
                }
        } catch (Exception e) {
           Resultado.setText("ERRORES ****** : "+e);
        }
    }//GEN-LAST:event_TimbrarPorTexto33ActionPerformed

    private void CancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarActionPerformed
        Correo="demo.sifec@gmail.com";
        Pass="Acceso$01";
        com.facturaselectronicascfdi.Resultado33 resultado;
        ResCance.setText("");
        try {
            
            resultado= portcancelar.cancelar33(Correo, Pass, "LAN7008173R5", "aa0fe5d6-a4c1-4e19-9e71-eedcb5c51107");
                if (resultado.getErrores().equals("")) {
      
                        ResCance.setText("RESULTADO EXITOSO SE CANCELO CORRECTAMENTE");
                      //Creamos el acuse de cancelacion si se existe uno 
                      if (resultado.getAcuse()!= null){
                             FileOutputStream fos= new FileOutputStream(".\\src\\wstimbradotexto33\\AcuseCancelacion.txt");
                             fos.write(resultado.getAcuse());
                             fos.close();
                       }      
                }else{
                    ResCance.setText("Se generaron los siguientes errores: "+resultado.getErrores() );
                }
        } catch (Exception e) {
           ResCance.setText("ERRORES ****** : "+e);
        }
    }//GEN-LAST:event_CancelarActionPerformed

    private void CancelarEncodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarEncodeActionPerformed
        Correo="demo.sifec@gmail.com";
        Pass="Acceso$01";
        com.facturaselectronicascfdi.Resultado33 resultado;
        ResCance.setText("");        
        try {
             File ArchivoCer = new File(".\\src\\wstimbradotexto33\\certificado.cer");
            FileInputStream fiscer = new FileInputStream(ArchivoCer); 
            byte[] Cer= new byte[(int)ArchivoCer.length()]; 
            fiscer.read(Cer);
            fiscer.close();
            //Ruta archivo Key con que el se sellara el xml, este tiene que corresponder con el certificado del emisor 
            File ArchivoKey = new File(".\\src\\wstimbradotexto33\\csd.key");
            FileInputStream fiskey = new FileInputStream(ArchivoKey); 
            byte[] Key= new byte[(int)ArchivoKey.length()]; 
            fiskey.read(Key);
            fiskey.close();
            
            //se obtiene objeto private key a partir del File
            PrivateKey key = KeyLoader.loadPKCS8PrivateKey(new ByteArrayInputStream(Key),"12345678a");
             //Se obtiene y codifica en Base64 el key del CSD
            BASE64Encoder b64 = new BASE64Encoder();
            String encode =b64.encode(key.getEncoded());  
            
            resultado= portcancelar.cancelar33EncodeCSD(Correo, Pass, "LAN7008173R5", "b9c9ac52-2e7b-4e22-94b6-c856826b9fe3",Cer,encode);
                if (resultado.getErrores().equals("")) { 
                    //Creamos el acuse de cancelacion si se existe uno 
                      if (resultado.getAcuse()!= null){
                             FileOutputStream fos= new FileOutputStream(".\\src\\wstimbradotexto33\\AcuseCancelacion.txt");
                             fos.write(resultado.getAcuse());
                             fos.close();
                       }      
                        ResCance.setText("RESULTADO EXITOSO SE CANCELO CORRECTAMENTE");
                }else{
                    ResCance.setText("Se generaron los siguientes errores: "+resultado.getErrores() );
                }
        } catch (Exception e) {
           ResCance.setText("ERRORES ****** : "+e);
        }
    }//GEN-LAST:event_CancelarEncodeActionPerformed

    private void SellarTimbrarPorTexto33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SellarTimbrarPorTexto33ActionPerformed
        Correo="demo.sifec@gmail.com";
        Pass="Acceso$01";
        Proceso = "511110"; //Proceso para convetir texto a xml, sellar timbrar mas pdf
        com.facturaselectronicascfdi.Resultado33 resultado;
        Resultado.setText("");
        try {            
             //Ruta archivo cer con que el se sellara el xml, este tiene que corresponder al emisor de dicho xml            
            File ArchivoCer = new File(".\\src\\wstimbradotexto33\\certificado.cer");
            FileInputStream fiscer = new FileInputStream(ArchivoCer); 
            byte[] Cer= new byte[(int)ArchivoCer.length()]; 
            fiscer.read(Cer);
            fiscer.close();
            //Ruta archivo Key con que el se sellara el xml, este tiene que corresponder con el certificado del emisor 
            File ArchivoKey = new File(".\\src\\wstimbradotexto33\\csd.key");
            FileInputStream fiskey = new FileInputStream(ArchivoKey); 
            byte[] Key= new byte[(int)ArchivoKey.length()]; 
            fiskey.read(Key);
            fiskey.close();
            
            //Ruta archivo TXT con el formato especifico para generar el xml
            String ArchivoXml =".\\src\\wstimbradotexto33\\EjemploFacturaCadenaTexto.txt";
            FileReader fr = new FileReader (ArchivoXml);
            BufferedReader br = new BufferedReader(fr);
            String Xml = br.readLine();
            
            resultado= port.sellarTimbrarPorTexto33(Correo, Pass, Proceso, Xml,Cer,Key,"12345678a");
                if (resultado.getErrores().equals("")) {
                    //RUTA DE SALIDA DE PDF                            
                            if (resultado.getPDF()!= null){
                             FileOutputStream fos= new FileOutputStream(".\\src\\wstimbradotexto33\\XmlTimbradoTexto33.pdf");
                             fos.write(resultado.getPDF());
                             fos.close();
                            }                          

                        //RUTA DE SALIDA DE XML TIMBRADO
                            if (resultado.getXML() != null){
                            FileOutputStream fos2= new FileOutputStream(".\\src\\wstimbradotexto33\\XmlTimbradoTexto33.xml");
                            fos2.write(resultado.getXML());
                            fos2.close();
                            }
                        //si no existen errores                  
                        Resultado.setText("RESULTADO EXITOSO \nUUID: "+resultado.getFolioUUID()+" \nCadena Original: "+resultado.getCadenaOriginal()+"");
                }else{
                    Resultado.setText("Se generaron los siguientes errores: "+resultado.getErrores() );
                }
        } catch (Exception e) {
           Resultado.setText("ERRORES ****** : "+e);
        }
    }//GEN-LAST:event_SellarTimbrarPorTexto33ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PanelPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PanelPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PanelPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PanelPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PanelPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cancelar;
    private javax.swing.JButton CancelarEncode;
    private javax.swing.JTextArea ResCance;
    private javax.swing.JTextArea Resultado;
    private javax.swing.JTextArea Resultado1;
    private javax.swing.JButton SellarTimbrarPorTexto33;
    private javax.swing.JButton TimbrarPorTexto33;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea4;
    // End of variables declaration//GEN-END:variables
}

