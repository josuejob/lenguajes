/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wstimbrado33;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.spec.PKCS8EncodedKeySpec;
import sun.misc.BASE64Encoder;
import wstimbrado33.KeyLoader;
/**
 *
 * @author ventas4
 */
public class PanelPrincipal extends javax.swing.JFrame {
    //Implementamos el WS para el timbrado
    private final com.facturaselectronicascfdi.WsTimbrado33 service = new com.facturaselectronicascfdi.WsTimbrado33();
    private final com.facturaselectronicascfdi.WsTimbrado33Soap port = service.getWsTimbrado33Soap12();
    //Implementamos el WS para las cancelaciones
    private final com.facturaselectronicascfdi.WsCancelar33 servicecancelar = new com.facturaselectronicascfdi.WsCancelar33();
    private final com.facturaselectronicascfdi.WsCancelar33Soap portcancelar = servicecancelar.getWsCancelar33Soap12();
    
    String Correo="demo.sifec@gmail.com";
    String Pass="Acceso$01";
    String Proceso = "410110"; 
    /**
     * Creates new form PanelPrincipal
     */
    public PanelPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Resultado1 = new javax.swing.JTextArea();
        Timbrar33 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Resultado = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        SellarTimbrar33 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        Cancelar = new javax.swing.JButton();
        CancelarEncode = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        ResCance = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();

        Resultado1.setColumns(20);
        Resultado1.setRows(5);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Timbrar33.setText("Timbrar33");
        Timbrar33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Timbrar33ActionPerformed(evt);
            }
        });

        Resultado.setColumns(20);
        Resultado.setLineWrap(true);
        Resultado.setRows(5);
        jScrollPane1.setViewportView(Resultado);

        jLabel1.setText("Resultado del Timbrado: ");

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 10)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("SellarTimbrar33(Correo, Pass, xml, Proceso, cer, key, clavekey);\nEste metodo SellarTimbrar33 requiere un .cer y .key con el que se mandara timbrar el xml\nestos tiene que coincidir con el Emisor\nRecolecta el cer y key en caso de timbrar correctamente crea xmltimbrado y pdf en caso de conterlo\nEste metodo regresar el xml timbrado");
        jScrollPane2.setViewportView(jTextArea1);

        SellarTimbrar33.setText("SellarTimbrar33");
        SellarTimbrar33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SellarTimbrar33ActionPerformed(evt);
            }
        });

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 10)); // NOI18N
        jTextArea2.setRows(5);
        jTextArea2.setText("Timbrar33(Corre,Pass, xml, Proceso);\nEste metodo requiere que el Emisor del Xml carge su cer y key en la plataforma web para poder \nrealizar el sellado del xml enviado \nEl xml a timbrar tiene que tener los siguientes atributos vacios NoCetificado=\"\" Certificado=\"\"\nSello=\"\" ya que el ws se encargara de sellar con el cer y key cargados, \nEste metodo regresar el xml timbrado\n");
        jScrollPane3.setViewportView(jTextArea2);

        Cancelar.setText("Cancelar");
        Cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarActionPerformed(evt);
            }
        });

        CancelarEncode.setText("CancelarEncodeCSD");
        CancelarEncode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarEncodeActionPerformed(evt);
            }
        });

        ResCance.setColumns(20);
        ResCance.setRows(5);
        jScrollPane4.setViewportView(ResCance);

        jLabel2.setText("Resultado Cancelacion: ");

        jTextArea4.setEditable(false);
        jTextArea4.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea4.setColumns(20);
        jTextArea4.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 10)); // NOI18N
        jTextArea4.setRows(5);
        jTextArea4.setText("Cancelar33(Correo, Pass, RFC, UUID); cer y key configurados en porta web\n\n\n\nCancelar33EncodeCSD(Correo, Pass, RFC, UUID, Cer, Pem); cer y pem se generan por su sistema");
        jScrollPane5.setViewportView(jTextArea4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(Timbrar33, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(SellarTimbrar33, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 656, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(Cancelar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(CancelarEncode, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(33, 33, 33)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(SellarTimbrar33, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(Timbrar33, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Cancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CancelarEncode))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Timbrar33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Timbrar33ActionPerformed
        Correo="demo.sifec@gmail.com";
        Pass="Acceso$01";
        Proceso = "410110"; 
        //210100 : Sellado Y Timbrado 
        //410110 : Sellado Y Timbrado Mas Pdf
        com.facturaselectronicascfdi.Resultado33 resultado;
        Resultado.setText("");
        try {
            //Ruta archivo XML con los atributos NoCertificado="",Certificado="",Sello=""
            File ArchivoXml = new File(".\\src\\wstimbrado33\\Xml_Sin_Sello_33.xml");
            FileInputStream fisxml = new FileInputStream(ArchivoXml); 
            byte[] Xml= new byte[(int)ArchivoXml.length()]; 
            fisxml.read(Xml);
            fisxml.close();
            resultado= port.timbrar33(Correo, Pass, Xml, Proceso);
                if (resultado.getErrores().equals("")) {
                    //RUTA DE SALIDA DE PDF                            
                            if (resultado.getPDF()!= null){
                             FileOutputStream fos= new FileOutputStream(".\\src\\wstimbrado33\\XmlTimbrado33.pdf");
                             fos.write(resultado.getPDF());
                             fos.close();
                            }                          

                        //RUTA DE SALIDA DE XML TIMBRADO
                            if (resultado.getXML() != null){
                            FileOutputStream fos2= new FileOutputStream(".\\src\\wstimbrado33\\XmlTimbrado33.xml");
                            fos2.write(resultado.getXML());
                            fos2.close();
                            }
                        //si no existen errores                  
                        Resultado.setText("RESULTADO EXITOSO \nUUID: "+resultado.getFolioUUID()+" \nCadena Original: "+resultado.getCadenaOriginal()+"");
                }else{
                    Resultado.setText("Se generaron los siguientes errores: "+resultado.getErrores() );
                }
        } catch (Exception e) {
           Resultado.setText("ERRORES ****** : "+e);
        }
    }//GEN-LAST:event_Timbrar33ActionPerformed

    private void CancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarActionPerformed
        Correo="demo.sifec@gmail.com";
        Pass="Acceso$01";
        com.facturaselectronicascfdi.Resultado33 resultado;
        ResCance.setText("");
        try {
            
            resultado= portcancelar.cancelar33(Correo, Pass, "LAN7008173R5", "aa0fe5d6-a4c1-4e19-9e71-eedcb5c51107");
                if (resultado.getErrores().equals("")) {
      
                        ResCance.setText("RESULTADO EXITOSO SE CANCELO CORRECTAMENTE");
                      //Creamos el acuse de cancelacion si se existe uno 
                      if (resultado.getAcuse()!= null){
                             FileOutputStream fos= new FileOutputStream(".\\src\\wstimbrado33\\AcuseCancelacion.txt");
                             fos.write(resultado.getAcuse());
                             fos.close();
                       }      
                }else{
                    ResCance.setText("Se generaron los siguientes errores: "+resultado.getErrores() );
                }
        } catch (Exception e) {
           ResCance.setText("ERRORES ****** : "+e);
        }
    }//GEN-LAST:event_CancelarActionPerformed

    private void CancelarEncodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarEncodeActionPerformed
        Correo="demo.sifec@gmail.com";
        Pass="Acceso$01";
        com.facturaselectronicascfdi.Resultado33 resultado;
        ResCance.setText("");        
        try {
             File ArchivoCer = new File(".\\src\\wstimbrado33\\certificado.cer");
            FileInputStream fiscer = new FileInputStream(ArchivoCer); 
            byte[] Cer= new byte[(int)ArchivoCer.length()]; 
            fiscer.read(Cer);
            fiscer.close();
            //Ruta archivo Key con que el se sellara el xml, este tiene que corresponder con el certificado del emisor 
            File ArchivoKey = new File(".\\src\\wstimbrado33\\csd.key");
            FileInputStream fiskey = new FileInputStream(ArchivoKey); 
            byte[] Key= new byte[(int)ArchivoKey.length()]; 
            fiskey.read(Key);
            fiskey.close();
            
            //se obtiene objeto private key a partir del File
            PrivateKey key = KeyLoader.loadPKCS8PrivateKey(new ByteArrayInputStream(Key),"12345678a");
             //Se obtiene y codifica en Base64 el key del CSD
            BASE64Encoder b64 = new BASE64Encoder();
            String encode =b64.encode(key.getEncoded());  
            
            resultado= portcancelar.cancelar33EncodeCSD(Correo, Pass, "LAN7008173R5", "c98922fb-65c1-4e40-a1eb-de3224bcc146",Cer,encode);
                if (resultado.getErrores().equals("")) { 
                    //Creamos el acuse de cancelacion si se existe uno 
                      if (resultado.getAcuse()!= null){
                             FileOutputStream fos= new FileOutputStream(".\\src\\wstimbrado33\\AcuseCancelacion.txt");
                             fos.write(resultado.getAcuse());
                             fos.close();
                       }      
                        ResCance.setText("RESULTADO EXITOSO SE CANCELO CORRECTAMENTE");
                }else{
                    ResCance.setText("Se generaron los siguientes errores: "+resultado.getErrores() );
                }
        } catch (Exception e) {
           ResCance.setText("ERRORES ****** : "+e);
        }
    }//GEN-LAST:event_CancelarEncodeActionPerformed

    private void SellarTimbrar33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SellarTimbrar33ActionPerformed
        Correo="demo.sifec@gmail.com";
        Pass="Acceso$01";
        Proceso = "210100"; 
        //210100 : Sellado Y Timbrado 
        //410110 : Sellado Y Timbrado Mas Pdf
        com.facturaselectronicascfdi.Resultado33 resultado;
        Resultado.setText("");
        try {            
             //Ruta archivo cer con que el se sellara el xml, este tiene que corresponder al emisor de dicho xml            
            File ArchivoCer = new File(".\\src\\wstimbrado33\\certificado.cer");
            FileInputStream fiscer = new FileInputStream(ArchivoCer); 
            byte[] Cer= new byte[(int)ArchivoCer.length()]; 
            fiscer.read(Cer);
            fiscer.close();
            //Ruta archivo Key con que el se sellara el xml, este tiene que corresponder con el certificado del emisor 
            File ArchivoKey = new File(".\\src\\wstimbrado33\\csd.key");
            FileInputStream fiskey = new FileInputStream(ArchivoKey); 
            byte[] Key= new byte[(int)ArchivoKey.length()]; 
            fiskey.read(Key);
            fiskey.close();
            
            //Ruta archivo XML con los atributos NoCertificado="",Certificado="",Sello=""
            File ArchivoXml = new File(".\\src\\wstimbrado33\\Xml_Sin_Sello_33.xml");
            FileInputStream fisxml = new FileInputStream(ArchivoXml); 
            byte[] Xml= new byte[(int)ArchivoXml.length()]; 
            fisxml.read(Xml);
            fisxml.close();
            resultado= port.sellarTimbrar33(Correo, Pass, Xml, Proceso,Cer,Key,"12345678a");
                if (resultado.getErrores().equals("")) {
                    //RUTA DE SALIDA DE PDF                            
                            if (resultado.getPDF()!= null){
                             FileOutputStream fos= new FileOutputStream(".\\src\\wstimbrado33\\XmlTimbrado33.pdf");
                             fos.write(resultado.getPDF());
                             fos.close();
                            }                          

                        //RUTA DE SALIDA DE XML TIMBRADO
                            if (resultado.getXML() != null){
                            FileOutputStream fos2= new FileOutputStream(".\\src\\wstimbrado33\\XmlTimbrado33.xml");
                            fos2.write(resultado.getXML());
                            fos2.close();
                            }
                        //si no existen errores                  
                        Resultado.setText("RESULTADO EXITOSO \nUUID: "+resultado.getFolioUUID()+" \nCadena Original: "+resultado.getCadenaOriginal()+"");
                }else{
                    Resultado.setText("Se generaron los siguientes errores: "+resultado.getErrores() );
                }
        } catch (Exception e) {
           Resultado.setText("ERRORES ****** : "+e);
        }
    }//GEN-LAST:event_SellarTimbrar33ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PanelPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PanelPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PanelPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PanelPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PanelPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cancelar;
    private javax.swing.JButton CancelarEncode;
    private javax.swing.JTextArea ResCance;
    private javax.swing.JTextArea Resultado;
    private javax.swing.JTextArea Resultado1;
    private javax.swing.JButton SellarTimbrar33;
    private javax.swing.JButton Timbrar33;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea4;
    // End of variables declaration//GEN-END:variables
}

